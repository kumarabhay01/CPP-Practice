#include<iostream>
#include<stack>
#include<queue>
using namespace std;

struct TreeNode {
	int data;
	TreeNode* left;
	TreeNode* right;

	TreeNode() :data{ 0 }, left{ nullptr }, right{ nullptr } {};
	TreeNode(int val) : data{ val }, left{ nullptr }, right{ nullptr } {};
	TreeNode(int val, TreeNode* left, TreeNode* right) :data(val), left(left), right(right) {};
};

TreeNode* createNode(int data) {
	TreeNode* curr = new TreeNode(data);
	return curr;
}

void levelOrderTraversal(TreeNode* root) {
	TreeNode* curr{};
	queue<TreeNode*> *Queue = new queue<TreeNode*>();

	if (!root)
		return;

	Queue->push(root);

	while (!Queue->empty()) {
		curr = Queue->front();
		cout << curr->data << " ";

		if(curr->left)
			Queue->push(curr->left);

		if(curr->right)
			Queue->push(curr->right);

		Queue->pop();
	}
	delete Queue;
}

void levelOrderTraversalInReverse(TreeNode* root) {
	TreeNode* curr{};
	queue<TreeNode*>* Queue = new queue<TreeNode*>();
	stack<TreeNode*>* Stack = new stack<TreeNode*>();

	if (!root)
		return;

	Queue->push(root);

	while (!Queue->empty()) {
		curr = Queue->front();

		if (curr->left)
			Queue->push(curr->left);

		if (curr->right)
			Queue->push(curr->right);

		Stack->push(curr);
		Queue->pop();
	}
	while (!Stack->empty()) {
		cout << Stack->top()->data << " ";
		Stack->pop();
	}
	delete Queue;
	delete Stack;
}

int findMaxWithoutRecursion(TreeNode* root) {
	TreeNode* curr{};
	queue<TreeNode*>* Queue = new queue<TreeNode*>();
	int max = INT_MIN;

	if (!root)
		return INT_MIN;

	Queue->push(root);

	while (!Queue->empty()) {
		curr = Queue->front();
		if (max < curr->data)
			max = curr->data;

		if (curr->left)
			Queue->push(curr->left);

		if (curr->right)
			Queue->push(curr->right);

		Queue->pop();
	}

	delete Queue;
	return max;
}

int findMaxWithRecursion(TreeNode* root) {
	int root_val{},
		left{},
		right{},
		max{ INT_MIN };

	if (root != NULL) {
		root_val = root->data;
		left = findMaxWithRecursion(root->left);
		right = findMaxWithRecursion(root->right);

		if (left > right)
			max = left;
		else
			max = right;

		if (root_val > max)
			max = root_val;
	}
	return max;
}

bool searchWithRecursion(TreeNode* root, int data) {
	int temp = false;
	if (!root)
		return temp;

	if (data == root->data) {
		temp = true;
		return temp;
	}
	else {
		temp = searchWithRecursion(root->left, data);
		if (temp != false)
			return temp;
		else
			return (searchWithRecursion(root->right, data));
	}
	return temp;
}

bool searchWithoutRecursion(TreeNode* root, int data) {
	queue<TreeNode*> *Queue = new queue<TreeNode*>();
	if (!root)
		return false;

	Queue->push(root);
	while (!Queue->empty()) {
		TreeNode* curr = Queue->front();
		if (data == curr->data) {
			delete Queue;
			return true;
		}

		if (curr->left)
			Queue->push(curr->left);

		if(curr->right)
			Queue->push(curr->right);

		Queue->pop();
	}
	delete Queue;
	return false;
}

int sizeOfTreeRecursively(TreeNode* root) {
	if (root == NULL)
		return 0;
	else
		return(sizeOfTreeRecursively(root->left) + 1 + sizeOfTreeRecursively(root->right));
}

int sizeOfTreeWithoutRecursion(TreeNode* root) {
	int size{};
	queue<TreeNode*>* Queue = new queue<TreeNode*>();

	if (root == NULL)
		return 0;

	Queue->push(root);
	
	while (!Queue->empty()) {
		TreeNode* curr = Queue->front();
		size++;
		if (curr->left)
			Queue->push(curr->left);

		if (curr->right)
			Queue->push(curr->right);

		Queue->pop();
	}
	delete Queue;
	return size;
}

TreeNode* deepestNodeInTree(TreeNode* root) {
	if (!root)
		return NULL;

	TreeNode* curr{};
	queue<TreeNode*>* Queue = new queue<TreeNode*>();
	Queue->push(root);
	while (!Queue->empty()) {
		curr = Queue->front();

		if (curr->left)
			Queue->push(curr->left);

		if (curr->right)
			Queue->push(curr->right);

		Queue->pop();
	}
	delete Queue;
	return curr;
}

int numberOfLeavesNode(TreeNode* root) {
	int leaveNode{};
	if (!root)
		return leaveNode;

	TreeNode* curr{};
	queue<TreeNode*>* Queue = new queue<TreeNode*>();
	Queue->push(root);

	while (!Queue->empty()) {
		curr = Queue->front();
		if (!curr->left && !curr->right)
			leaveNode++;
		else {
			if (curr->left)
				Queue->push(curr->left);
			
			if (curr->right)
				Queue->push(curr->right);
		}
		Queue->pop();
	}
	return leaveNode;
}

int main() {

	TreeNode* root =  createNode(5);

	root->left = createNode(1);
	root->right = createNode(4);
	root->left->left = createNode(3);
	root->left->right = createNode(8);
	root->right->left = createNode(7);

	cout << "Level Order Print of tree: ";
	levelOrderTraversal(root);

	cout << endl << "Max value in the tree is (findMaxWithRecursion): " << findMaxWithRecursion(root);

	cout << endl << "Max value in the tree is (findMaxWithoutRecursion): " << findMaxWithoutRecursion(root);

	cout << endl << "Find value (8) in the tree is (searchWithRecursion): " << searchWithRecursion(root,8);

	cout << endl << "Find value (10) in the tree is (searchWithRecursion): " << searchWithRecursion(root, 10);

	cout << endl << "Find value (8) in the tree is (searchWithoutRecursion): " << searchWithoutRecursion(root, 8);

	cout << endl << "Find value (10) in the tree is (searchWithoutRecursion): " << searchWithoutRecursion(root, 10);

	cout << endl << "Size of the tree is (sizeOfTreeRecursively): " << sizeOfTreeRecursively(root);

	cout << endl << "Size of the tree is (sizeOfTreeWithoutRecursion): " << sizeOfTreeWithoutRecursion(root) << endl;

	cout << "Level Order Print of tree: ";
	levelOrderTraversalInReverse(root);

	cout << endl;

	cout << "Deepest node of the tree is: " << deepestNodeInTree(root)->data << endl;
	
	cout << "Number of leave node: " << numberOfLeavesNode(root) << endl;

	return 0;
}
